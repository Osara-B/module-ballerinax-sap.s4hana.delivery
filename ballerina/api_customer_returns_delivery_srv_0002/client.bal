// AUTO-GENERATED FILE. DO NOT MODIFY.
// This file is auto-generated by the Ballerina OpenAPI tool.

// Copyright (c) 2024, WSO2 LLC. (http://www.wso2.org).
//
// WSO2 LLC. licenses this file to you under the Apache License,
// Version 2.0 (the "License"); you may not use this file except
// in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

import ballerina/http;

# This synchronous inbound service enables you to read, create, update, and delete customer returns deliveries. It can be consumed in Fiori apps and on other user interfaces.
public isolated client class Client {
    final http:Client clientEp;
    # Gets invoked to initialize the `connector`.
    #
    # + config - The configurations to be used when initializing the `connector` 
    # + serviceUrl - URL of the target service 
    # + return - An error if connector initialization failed 
    public isolated function init(ConnectionConfig config, string serviceUrl) returns error? {
        http:ClientConfiguration httpClientConfig = {auth: config.auth, httpVersion: config.httpVersion, timeout: config.timeout, forwarded: config.forwarded, poolConfig: config.poolConfig, compression: config.compression, circuitBreaker: config.circuitBreaker, retryConfig: config.retryConfig, validation: config.validation};
        do {
            if config.http1Settings is ClientHttp1Settings {
                ClientHttp1Settings settings = check config.http1Settings.ensureType(ClientHttp1Settings);
                httpClientConfig.http1Settings = {...settings};
            }
            if config.http2Settings is http:ClientHttp2Settings {
                httpClientConfig.http2Settings = check config.http2Settings.ensureType(http:ClientHttp2Settings);
            }
            if config.cache is http:CacheConfig {
                httpClientConfig.cache = check config.cache.ensureType(http:CacheConfig);
            }
            if config.responseLimits is http:ResponseLimitConfigs {
                httpClientConfig.responseLimits = check config.responseLimits.ensureType(http:ResponseLimitConfigs);
            }
            if config.secureSocket is http:ClientSecureSocket {
                httpClientConfig.secureSocket = check config.secureSocket.ensureType(http:ClientSecureSocket);
            }
            if config.proxy is http:ProxyConfig {
                httpClientConfig.proxy = check config.proxy.ensureType(http:ProxyConfig);
            }
        }
        http:Client httpEp = check new (serviceUrl, httpClientConfig);
        self.clientEp = httpEp;
        return;
    }

    # Creates customer returns deliveries with reference to preceding document.
    #
    # + headers - Headers to be sent with the request 
    # + payload - New entity 
    # + return - Created entity 
    remote isolated function createA_ReturnsDeliveryHeader(CreateA_ReturnsDeliveryHeader payload, map<string|string[]> headers = {}) returns A_ReturnsDeliveryHeaderWrapper|error {
        string resourcePath = string `/A_ReturnsDeliveryHeader`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Confirms putaway quantity of customer returns delivery items.
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Success 
    remote isolated function createConfirmPutawayAllItems(map<string|string[]> headers = {}, *CreateConfirmPutawayAllItemsQueries queries) returns Wrapper_1|error {
        string resourcePath = string `/ConfirmPutawayAllItems`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        http:Request request = new;
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Confirms putaway quantity of customer returns delivery item.
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Success 
    remote isolated function createConfirmPutawayOneItem(map<string|string[]> headers = {}, *CreateConfirmPutawayOneItemQueries queries) returns Wrapper_1|error {
        string resourcePath = string `/ConfirmPutawayOneItem`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        http:Request request = new;
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Creates an additional batch split item for an customer returns delivery item.
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Success 
    remote isolated function createCreateBatchSplitItem(map<string|string[]> headers = {}, *CreateCreateBatchSplitItemQueries queries) returns CreatedDeliveryItem_1|error {
        string resourcePath = string `/CreateBatchSplitItem`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        http:Request request = new;
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Posts goods receipt for customer returns delivery.
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Success 
    remote isolated function createPostGoodsReceipt(map<string|string[]> headers = {}, *CreatePostGoodsReceiptQueries queries) returns Wrapper_1|error {
        string resourcePath = string `/PostGoodsReceipt`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        http:Request request = new;
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Takes over delivery quantity as putaway quantity for all customer returns delivery items.
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Success 
    remote isolated function createPutawayAllItems(map<string|string[]> headers = {}, *CreatePutawayAllItemsQueries queries) returns Wrapper_1|error {
        string resourcePath = string `/PutawayAllItems`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        http:Request request = new;
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Takes over delivery quantity as putaway quantity for specified customer returns delivery item.
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Success 
    remote isolated function createPutawayOneItem(map<string|string[]> headers = {}, *CreatePutawayOneItemQueries queries) returns Wrapper_1|error {
        string resourcePath = string `/PutawayOneItem`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        http:Request request = new;
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Sets putaway quantity and delivery quantity for customer returns delivery item.
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Success 
    remote isolated function createPutawayOneItemWithBaseQuantity(map<string|string[]> headers = {}, *CreatePutawayOneItemWithBaseQuantityQueries queries) returns Wrapper_1|error {
        string resourcePath = string `/PutawayOneItemWithBaseQuantity`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        http:Request request = new;
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Sets putaway quantity and delivery quantity for customer returns delivery item.
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Success 
    remote isolated function createPutawayOneItemWithSalesQuantity(map<string|string[]> headers = {}, *CreatePutawayOneItemWithSalesQuantityQueries queries) returns Wrapper_1|error {
        string resourcePath = string `/PutawayOneItemWithSalesQuantity`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        http:Request request = new;
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Reverses goods receipt for customer returns delivery.
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Success 
    remote isolated function createReverseGoodsReceipt(map<string|string[]> headers = {}, *CreateReverseGoodsReceiptQueries queries) returns Wrapper|error {
        string resourcePath = string `/ReverseGoodsReceipt`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        http:Request request = new;
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Sets putaway quantity in base unit of measure for delivery item.
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Success 
    remote isolated function createSetPutawayQuantityWithBaseQuantity(map<string|string[]> headers = {}, *CreateSetPutawayQuantityWithBaseQuantityQueries queries) returns Wrapper_1|error {
        string resourcePath = string `/SetPutawayQuantityWithBaseQuantity`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        http:Request request = new;
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Deletes customer returns deliveries.
    #
    # + DeliveryDocument - Delivery
    # + headers - Headers to be sent with the request 
    # + return - Success 
    remote isolated function deleteA_ReturnsDeliveryHeader(string DeliveryDocument, map<string|string[]> headers = {}) returns http:Response|error {
        string resourcePath = string `/A_ReturnsDeliveryHeader('${getEncodedUri(DeliveryDocument)}')`;
        return self.clientEp->delete(resourcePath, headers = headers);
    }

    # Deletes customer returns delivery items.
    #
    # + DeliveryDocument - Delivery
    # + DeliveryDocumentItem - Item
    # + headers - Headers to be sent with the request 
    # + return - Success 
    remote isolated function deleteA_ReturnsDeliveryItem(string DeliveryDocument, string DeliveryDocumentItem, map<string|string[]> headers = {}) returns http:Response|error {
        string resourcePath = string `/A_ReturnsDeliveryItem(DeliveryDocument='${getEncodedUri(DeliveryDocument)}',DeliveryDocumentItem='${getEncodedUri(DeliveryDocumentItem)}')`;
        return self.clientEp->delete(resourcePath, headers = headers);
    }

    # Reads customer returns delivery document flows by key.
    #
    # + PrecedingDocument - Preceding Doc.
    # + PrecedingDocumentItem - Preceding Item
    # + SubsequentDocumentCategory - Subs.Doc.Categ.
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getA_ReturnsDeliveryDocFlow(string PrecedingDocument, string PrecedingDocumentItem, string SubsequentDocumentCategory, map<string|string[]> headers = {}, *GetA_ReturnsDeliveryDocFlowQueries queries) returns A_ReturnsDeliveryDocFlowWrapper|error {
        string resourcePath = string `/A_ReturnsDeliveryDocFlow(PrecedingDocument='${getEncodedUri(PrecedingDocument)}',PrecedingDocumentItem='${getEncodedUri(PrecedingDocumentItem)}',SubsequentDocumentCategory='${getEncodedUri(SubsequentDocumentCategory)}')`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads customer returns delivery headers.
    #
    # + DeliveryDocument - Delivery
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getA_ReturnsDeliveryHeader(string DeliveryDocument, map<string|string[]> headers = {}, *GetA_ReturnsDeliveryHeaderQueries queries) returns A_ReturnsDeliveryHeaderWrapper|error {
        string resourcePath = string `/A_ReturnsDeliveryHeader('${getEncodedUri(DeliveryDocument)}')`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads customer returns delivery items.
    #
    # + DeliveryDocument - Delivery
    # + DeliveryDocumentItem - Item
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getA_ReturnsDeliveryItem(string DeliveryDocument, string DeliveryDocumentItem, map<string|string[]> headers = {}, *GetA_ReturnsDeliveryItemQueries queries) returns A_ReturnsDeliveryItemWrapper|error {
        string resourcePath = string `/A_ReturnsDeliveryItem(DeliveryDocument='${getEncodedUri(DeliveryDocument)}',DeliveryDocumentItem='${getEncodedUri(DeliveryDocumentItem)}')`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads addresses of specific customer returns delivery partner.
    #
    # + PartnerFunction - Partner Functn
    # + SDDocument - SD Document
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getAddressOfA_ReturnsDeliveryPartner(string PartnerFunction, string SDDocument, map<string|string[]> headers = {}, *GetAddressOfA_ReturnsDeliveryPartnerQueries queries) returns A_ReturnsDeliveryAddressWrapper|error {
        string resourcePath = string `/A_ReturnsDeliveryPartner(PartnerFunction='${getEncodedUri(PartnerFunction)}',SDDocument='${getEncodedUri(SDDocument)}')/to_Address`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads maintenance item object lists of specific customer returns delivery item.
    #
    # + DeliveryDocument - Delivery
    # + DeliveryDocumentItem - Item
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getSerialDeliveryItemOfA_ReturnsDeliveryItem(string DeliveryDocument, string DeliveryDocumentItem, map<string|string[]> headers = {}, *GetSerialDeliveryItemOfA_ReturnsDeliveryItemQueries queries) returns A_ReturnsDeliverySrlNmbrWrapper|error {
        string resourcePath = string `/A_ReturnsDeliveryItem(DeliveryDocument='${getEncodedUri(DeliveryDocument)}',DeliveryDocumentItem='${getEncodedUri(DeliveryDocumentItem)}')/to_SerialDeliveryItem`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads customer returns delivery headers.
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listA_ReturnsDeliveryHeaders(map<string|string[]> headers = {}, *ListA_ReturnsDeliveryHeadersQueries queries) returns CollectionOfA_ReturnsDeliveryHeaderWrapper|error {
        string resourcePath = string `/A_ReturnsDeliveryHeader`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads customer returns delivery items.
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listA_ReturnsDeliveryItems(map<string|string[]> headers = {}, *ListA_ReturnsDeliveryItemsQueries queries) returns CollectionOfA_ReturnsDeliveryItemWrapper|error {
        string resourcePath = string `/A_ReturnsDeliveryItem`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads items of specific customer returns delivery header.
    #
    # + DeliveryDocument - Delivery
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listDeliveryDocumentItemsOfA_ReturnsDeliveryHeader(string DeliveryDocument, map<string|string[]> headers = {}, *ListDeliveryDocumentItemsOfA_ReturnsDeliveryHeaderQueries queries) returns CollectionOfA_ReturnsDeliveryItemWrapper|error {
        string resourcePath = string `/A_ReturnsDeliveryHeader('${getEncodedUri(DeliveryDocument)}')/to_DeliveryDocumentItem`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads partners of specific customer returns delivery header.
    #
    # + DeliveryDocument - Delivery
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listDeliveryDocumentPartnersOfA_ReturnsDeliveryHeader(string DeliveryDocument, map<string|string[]> headers = {}, *ListDeliveryDocumentPartnersOfA_ReturnsDeliveryHeaderQueries queries) returns CollectionOfA_ReturnsDeliveryPartnerWrapper|error {
        string resourcePath = string `/A_ReturnsDeliveryHeader('${getEncodedUri(DeliveryDocument)}')/to_DeliveryDocumentPartner`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads document flows of specific customer returns delivery item.
    #
    # + DeliveryDocument - Delivery
    # + DeliveryDocumentItem - Item
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listDocumentFlowsOfA_ReturnsDeliveryItem(string DeliveryDocument, string DeliveryDocumentItem, map<string|string[]> headers = {}, *ListDocumentFlowsOfA_ReturnsDeliveryItemQueries queries) returns CollectionOfA_ReturnsDeliveryDocFlowWrapper|error {
        string resourcePath = string `/A_ReturnsDeliveryItem(DeliveryDocument='${getEncodedUri(DeliveryDocument)}',DeliveryDocumentItem='${getEncodedUri(DeliveryDocumentItem)}')/to_DocumentFlow`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads maintenance item objects of specific customer returns delivery maintenance item object list.
    #
    # + MaintenanceItemObjectList - Object list
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listMaintenanceItemObjectsOfA_ReturnsDeliverySrlNmbr(string MaintenanceItemObjectList, map<string|string[]> headers = {}, *ListMaintenanceItemObjectsOfA_ReturnsDeliverySrlNmbrQueries queries) returns CollectionOfA_ReturnsDeliveryMaintObjWrapper|error {
        string resourcePath = string `/A_ReturnsDeliverySrlNmbr(${getEncodedUri(MaintenanceItemObjectList)})/to_MaintenanceItemObject`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Updates customer returns delivery document flows.
    #
    # + PrecedingDocument - Preceding Doc.
    # + PrecedingDocumentItem - Preceding Item
    # + SubsequentDocumentCategory - Subs.Doc.Categ.
    # + headers - Headers to be sent with the request 
    # + payload - New property values 
    # + return - Success 
    remote isolated function patchA_ReturnsDeliveryDocFlow(string PrecedingDocument, string PrecedingDocumentItem, string SubsequentDocumentCategory, Modified\ A_ReturnsDeliveryDocFlowType payload, map<string|string[]> headers = {}) returns http:Response|error {
        string resourcePath = string `/A_ReturnsDeliveryDocFlow(PrecedingDocument='${getEncodedUri(PrecedingDocument)}',PrecedingDocumentItem='${getEncodedUri(PrecedingDocumentItem)}',SubsequentDocumentCategory='${getEncodedUri(SubsequentDocumentCategory)}')`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->patch(resourcePath, request, headers);
    }

    # Updates customer returns delivery headers.
    #
    # + DeliveryDocument - Delivery
    # + headers - Headers to be sent with the request 
    # + payload - New property values 
    # + return - Success 
    remote isolated function patchA_ReturnsDeliveryHeader(string DeliveryDocument, Modified\ A_ReturnsDeliveryHeaderType payload, map<string|string[]> headers = {}) returns http:Response|error {
        string resourcePath = string `/A_ReturnsDeliveryHeader('${getEncodedUri(DeliveryDocument)}')`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->patch(resourcePath, request, headers);
    }

    # Updates customer returns delivery items.
    #
    # + DeliveryDocument - Delivery
    # + DeliveryDocumentItem - Item
    # + headers - Headers to be sent with the request 
    # + payload - New property values 
    # + return - Success 
    remote isolated function patchA_ReturnsDeliveryItem(string DeliveryDocument, string DeliveryDocumentItem, Modified\ A_ReturnsDeliveryItemType payload, map<string|string[]> headers = {}) returns http:Response|error {
        string resourcePath = string `/A_ReturnsDeliveryItem(DeliveryDocument='${getEncodedUri(DeliveryDocument)}',DeliveryDocumentItem='${getEncodedUri(DeliveryDocumentItem)}')`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->patch(resourcePath, request, headers);
    }

    # Send a group of requests
    #
    # + headers - Headers to be sent with the request 
    # + request - Batch request 
    # + return - Batch response 
    remote isolated function performBatchOperation(http:Request request, map<string|string[]> headers = {}) returns http:Response|error {
        string resourcePath = string `/$batch`;
        // TODO: Update the request as needed;
        return self.clientEp->post(resourcePath, request, headers);
    }
}
