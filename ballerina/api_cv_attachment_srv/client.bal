// AUTO-GENERATED FILE. DO NOT MODIFY.
// This file is auto-generated by the Ballerina OpenAPI tool.

import ballerina/http;
import ballerinax/sap;

#

#

# This service allows you to manage attachments and attachment URLs for business objects. You can perform operations such as create, read, rename, and deletion of attachments. You can also read an existing document info record (DIR), and add attachments to it. The service returns an appropriate success or error response while performing the attachment operations.

#

# Consumers of this service can configure the Harmonized Document Management (HDM) functionality to support attachments from various document frameworks such as Generic Object Services (GOS), Document Management System (DMS), and ArchiveLink. If this configuration has been maintained, this service also supports uploading and downloading of attachments that are larger than 100MB.

#

# If the HDM configuration has not been maintained for a business object, then this service supports attachments only from the GOS and DMS document frameworks. For more information on HDM, refer to the Business Documentation linked below.

public isolated client class Client {
    final sap:Client clientEp;

    # Gets invoked to initialize the `connector`.
    #
    # + config - The configurations to be used when initializing the `connector` 
    # + serviceUrl - URL of the target service 
    # + return - An error if connector initialization failed 
    public isolated function init(ConnectionConfig config, string hostname, int port = 443) returns error? {
        string serviceUrl = string `https://${hostname}:${port}/sap/opu/odata/sap/API_CV_ATTACHMENT_SRV`;
        http:ClientConfiguration httpClientConfig = {auth: config.auth, httpVersion: config.httpVersion, timeout: config.timeout, forwarded: config.forwarded, poolConfig: config.poolConfig, compression: config.compression, circuitBreaker: config.circuitBreaker, retryConfig: config.retryConfig, validation: config.validation};
        do {
            if config.http1Settings is ClientHttp1Settings {
                ClientHttp1Settings settings = check config.http1Settings.ensureType(ClientHttp1Settings);
                httpClientConfig.http1Settings = {...settings};
            }
            if config.http2Settings is http:ClientHttp2Settings {
                httpClientConfig.http2Settings = check config.http2Settings.ensureType(http:ClientHttp2Settings);
            }
            if config.cache is http:CacheConfig {
                httpClientConfig.cache = check config.cache.ensureType(http:CacheConfig);
            }
            if config.responseLimits is http:ResponseLimitConfigs {
                httpClientConfig.responseLimits = check config.responseLimits.ensureType(http:ResponseLimitConfigs);
            }
            if config.secureSocket is http:ClientSecureSocket {
                httpClientConfig.secureSocket = check config.secureSocket.ensureType(http:ClientSecureSocket);
            }
            if config.proxy is http:ProxyConfig {
                httpClientConfig.proxy = check config.proxy.ensureType(http:ProxyConfig);
            }
        }
        sap:Client httpEp = check new (serviceUrl, httpClientConfig);
        self.clientEp = httpEp;
        return;
    }

    # Assigns documents to business objects.
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Success 
    remote isolated function createAssignDocumentToBusinessObject(map<string|string[]> headers = {}, *CreateAssignDocumentToBusinessObjectQueries queries) returns AssignDocument_1|error {
        string resourcePath = string `/AssignDocumentToBusinessObject`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        http:Request request = new;
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Uploads an attachment to a business object.
    #
    # + headers - Headers to be sent with the request 
    # + request - New media resource 
    # + return - Created entity 
    remote isolated function createAttachmentContentSet(http:Request request, map<string|string[]> headers = {}) returns AttachmentContent_1|error {
        string resourcePath = string `/AttachmentContentSet`;
        // TODO: Update the request as needed;
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Returns a URL and token that are used to upload an attachment to a given SAP Object Node Type.
    #
    # + headers - Headers to be sent with the request 
    # + payload - New entity 
    # + return - Created entity 
    remote isolated function createAttachmentForSAPObjectNodeTypeSet(CreateAttachmentForSAPObjectNode payload, map<string|string[]> headers = {}) returns AttachmentForSAPObjectNodeWrapper|error {
        string resourcePath = string `/AttachmentForSAPObjectNodeTypeSet`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Returns a URL and token to upload an attachment to a given SAP Object Type or SAP Object Node Type.
    #
    # + headers - Headers to be sent with the request 
    # + payload - New entity 
    # + return - Created entity 
    remote isolated function createAttachmentHarmonizedOperationSet(CreateAttachmentHarmonizedOperation payload, map<string|string[]> headers = {}) returns AttachmentHarmonizedOperation_1|error {
        string resourcePath = string `/AttachmentHarmonizedOperationSet`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Uploads a URL as an attachment for a business object.
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Success 
    remote isolated function createCreateUrlAsAttachment(map<string|string[]> headers = {}, *CreateCreateUrlAsAttachmentQueries queries) returns AttachmentContent_1|error {
        string resourcePath = string `/CreateUrlAsAttachment`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        http:Request request = new;
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Creates an attachment for a document info record.
    #
    # + DocumentInfoRecordDocType - Document Type
    # + DocumentInfoRecordDocNumber - Document number
    # + DocumentInfoRecordDocVersion - Document Version
    # + DocumentInfoRecordDocPart - Document Part
    # + headers - Headers to be sent with the request 
    # + request - New media resource 
    # + return - Created entity 
    remote isolated function createDocumentInfoRecordToAttachmentNavigationOfA_DocumentInfoRecordAttch(string DocumentInfoRecordDocType, string DocumentInfoRecordDocNumber, string DocumentInfoRecordDocVersion, string DocumentInfoRecordDocPart, http:Request request, map<string|string[]> headers = {}) returns AttachmentContent_1|error {
        string resourcePath = string `/A_DocumentInfoRecordAttch(DocumentInfoRecordDocType='${getEncodedUri(DocumentInfoRecordDocType)}',DocumentInfoRecordDocNumber='${getEncodedUri(DocumentInfoRecordDocNumber)}',DocumentInfoRecordDocVersion='${getEncodedUri(DocumentInfoRecordDocVersion)}',DocumentInfoRecordDocPart='${getEncodedUri(DocumentInfoRecordDocPart)}')/DocumentInfoRecordToAttachmentNavigation`;
        // TODO: Update the request as needed;
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Creates an object link between an attachment and business object.
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Success 
    remote isolated function createLinkAttachmentToSAPObject(map<string|string[]> headers = {}, *CreateLinkAttachmentToSAPObjectQueries queries) returns AttachmentHarmonizedOperation_1|error {
        string resourcePath = string `/LinkAttachmentToSAPObject`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        http:Request request = new;
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Creates an object link between an attachment and line item of a business object.
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Success 
    remote isolated function createLinkAttachmentToSAPObjectNode(map<string|string[]> headers = {}, *CreateLinkAttachmentToSAPObjectNodeQueries queries) returns AttachmentForSAPObjectNodeWrapper|error {
        string resourcePath = string `/LinkAttachmentToSAPObjectNode`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        http:Request request = new;
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Renames an attachment that has been uploaded to a business object.
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Success 
    remote isolated function createRenameAttachment(map<string|string[]> headers = {}, *CreateRenameAttachmentQueries queries) returns AttachmentContent_1|error {
        string resourcePath = string `/RenameAttachment`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        http:Request request = new;
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Deletes the attachment associated with the business object.
    #
    # + DocumentInfoRecordDocType - DocumentInfoRecordDocType
    # + DocumentInfoRecordDocNumber - DocumentInfoRecordDocNumber
    # + DocumentInfoRecordDocVersion - DocumentInfoRecordDocVersion
    # + DocumentInfoRecordDocPart - DocumentInfoRecordDocPart
    # + LogicalDocument - LogicalDocument
    # + ArchiveDocumentID - ArchiveDocumentID
    # + LinkedSAPObjectKey - LinkedSAPObjectKey
    # + BusinessObjectTypeName - BusinessObjectTypeName
    # + headers - Headers to be sent with the request 
    # + return - Success 
    remote isolated function deleteAttachmentContentSet(string DocumentInfoRecordDocType, string DocumentInfoRecordDocNumber, string DocumentInfoRecordDocVersion, string DocumentInfoRecordDocPart, string LogicalDocument, string ArchiveDocumentID, string LinkedSAPObjectKey, string BusinessObjectTypeName, map<string|string[]> headers = {}) returns http:Response|error {
        string resourcePath = string `/AttachmentContentSet(DocumentInfoRecordDocType='${getEncodedUri(DocumentInfoRecordDocType)}',DocumentInfoRecordDocNumber='${getEncodedUri(DocumentInfoRecordDocNumber)}',DocumentInfoRecordDocVersion='${getEncodedUri(DocumentInfoRecordDocVersion)}',DocumentInfoRecordDocPart='${getEncodedUri(DocumentInfoRecordDocPart)}',LogicalDocument='${getEncodedUri(LogicalDocument)}',ArchiveDocumentID='${getEncodedUri(ArchiveDocumentID)}',LinkedSAPObjectKey='${getEncodedUri(LinkedSAPObjectKey)}',BusinessObjectTypeName='${getEncodedUri(BusinessObjectTypeName)}')`;
        return self.clientEp->delete(resourcePath, headers = headers);
    }

    # Deletes an attachment for a given SAP Object Node Type.
    #
    # + LogicalDocument - LogicalDocument
    # + ArchiveDocumentID - ArchiveDocumentID
    # + LinkedSAPObjectKey - LinkedSAPObjectKey
    # + SAPObjectType - SAPObjectType
    # + SAPObjectNodeType - SAPObjectNodeType
    # + HarmonizedDocumentType - HarmonizedDocumentType
    # + headers - Headers to be sent with the request 
    # + return - Success 
    remote isolated function deleteAttachmentForSAPObjectNodeTypeSet(string LogicalDocument, string ArchiveDocumentID, string LinkedSAPObjectKey, string SAPObjectType, string SAPObjectNodeType, string HarmonizedDocumentType, map<string|string[]> headers = {}) returns http:Response|error {
        string resourcePath = string `/AttachmentForSAPObjectNodeTypeSet(LogicalDocument='${getEncodedUri(LogicalDocument)}',ArchiveDocumentID='${getEncodedUri(ArchiveDocumentID)}',LinkedSAPObjectKey='${getEncodedUri(LinkedSAPObjectKey)}',SAPObjectType='${getEncodedUri(SAPObjectType)}',SAPObjectNodeType='${getEncodedUri(SAPObjectNodeType)}',HarmonizedDocumentType='${getEncodedUri(HarmonizedDocumentType)}')`;
        return self.clientEp->delete(resourcePath, headers = headers);
    }

    # Deletes an attachment for a given SAP Object Type or SAP Object Node Type.
    #
    # + LogicalDocument - LogicalDocument
    # + ArchiveDocumentID - ArchiveDocumentID
    # + LinkedSAPObjectKey - LinkedSAPObjectKey
    # + SAPObjectType - SAPObjectType
    # + HarmonizedDocumentType - HarmonizedDocumentType
    # + headers - Headers to be sent with the request 
    # + return - Success 
    remote isolated function deleteAttachmentHarmonizedOperationSet(string LogicalDocument, string ArchiveDocumentID, string LinkedSAPObjectKey, string SAPObjectType, string HarmonizedDocumentType, map<string|string[]> headers = {}) returns http:Response|error {
        string resourcePath = string `/AttachmentHarmonizedOperationSet(LogicalDocument='${getEncodedUri(LogicalDocument)}',ArchiveDocumentID='${getEncodedUri(ArchiveDocumentID)}',LinkedSAPObjectKey='${getEncodedUri(LinkedSAPObjectKey)}',SAPObjectType='${getEncodedUri(SAPObjectType)}',HarmonizedDocumentType='${getEncodedUri(HarmonizedDocumentType)}')`;
        return self.clientEp->delete(resourcePath, headers = headers);
    }

    # Retrieves the details of a document info record.
    #
    # + DocumentInfoRecordDocType - Document Type
    # + DocumentInfoRecordDocNumber - Document number
    # + DocumentInfoRecordDocVersion - Document Version
    # + DocumentInfoRecordDocPart - Document Part
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getA_DocumentInfoRecordAttch(string DocumentInfoRecordDocType, string DocumentInfoRecordDocNumber, string DocumentInfoRecordDocVersion, string DocumentInfoRecordDocPart, map<string|string[]> headers = {}, *GetA_DocumentInfoRecordAttchQueries queries) returns A_DocumentInfoRecordAttchWrapper|error {
        string resourcePath = string `/A_DocumentInfoRecordAttch(DocumentInfoRecordDocType='${getEncodedUri(DocumentInfoRecordDocType)}',DocumentInfoRecordDocNumber='${getEncodedUri(DocumentInfoRecordDocNumber)}',DocumentInfoRecordDocVersion='${getEncodedUri(DocumentInfoRecordDocVersion)}',DocumentInfoRecordDocPart='${getEncodedUri(DocumentInfoRecordDocPart)}')`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Returns a URL and a token that are used to download an attachment from a given SAP Object Node Type.
    #
    # + LogicalDocument - LogicalDocument
    # + ArchiveDocumentID - ArchiveDocumentID
    # + LinkedSAPObjectKey - LinkedSAPObjectKey
    # + SAPObjectType - SAPObjectType
    # + SAPObjectNodeType - SAPObjectNodeType
    # + HarmonizedDocumentType - HarmonizedDocumentType
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getAttachmentForSAPObjectNodeTypeSet(string LogicalDocument, string ArchiveDocumentID, string LinkedSAPObjectKey, string SAPObjectType, string SAPObjectNodeType, string HarmonizedDocumentType, map<string|string[]> headers = {}, *GetAttachmentForSAPObjectNodeTypeSetQueries queries) returns AttachmentForSAPObjectNodeWrapper|error {
        string resourcePath = string `/AttachmentForSAPObjectNodeTypeSet(LogicalDocument='${getEncodedUri(LogicalDocument)}',ArchiveDocumentID='${getEncodedUri(ArchiveDocumentID)}',LinkedSAPObjectKey='${getEncodedUri(LinkedSAPObjectKey)}',SAPObjectType='${getEncodedUri(SAPObjectType)}',SAPObjectNodeType='${getEncodedUri(SAPObjectNodeType)}',HarmonizedDocumentType='${getEncodedUri(HarmonizedDocumentType)}')`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Returns a URL and token to download an attachment from a given SAP Object Type or SAP Object Node Type.
    #
    # + LogicalDocument - LogicalDocument
    # + ArchiveDocumentID - ArchiveDocumentID
    # + LinkedSAPObjectKey - LinkedSAPObjectKey
    # + SAPObjectType - SAPObjectType
    # + HarmonizedDocumentType - HarmonizedDocumentType
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getAttachmentHarmonizedOperationSet(string LogicalDocument, string ArchiveDocumentID, string LinkedSAPObjectKey, string SAPObjectType, string HarmonizedDocumentType, map<string|string[]> headers = {}, *GetAttachmentHarmonizedOperationSetQueries queries) returns AttachmentHarmonizedOperationWrapper|error {
        string resourcePath = string `/AttachmentHarmonizedOperationSet(LogicalDocument='${getEncodedUri(LogicalDocument)}',ArchiveDocumentID='${getEncodedUri(ArchiveDocumentID)}',LinkedSAPObjectKey='${getEncodedUri(LinkedSAPObjectKey)}',SAPObjectType='${getEncodedUri(SAPObjectType)}',HarmonizedDocumentType='${getEncodedUri(HarmonizedDocumentType)}')`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Invoke function AuthorizationCheck
    #
    # + headers - Headers to be sent with the request 
    # + return - Success 
    remote isolated function getAuthorizationCheck(map<string|string[]> headers = {}) returns AttachmentContent_1|error {
        string resourcePath = string `/AuthorizationCheck`;
        return self.clientEp->get(resourcePath, headers);
    }

    # Retrieves the metadata of the attachments associated with the business object.
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Success 
    remote isolated function getGetAllOriginals(map<string|string[]> headers = {}, *GetGetAllOriginalsQueries queries) returns Wrapper|error {
        string resourcePath = string `/GetAllOriginals`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    # Retrieves the number of attachments for a business object instance key.
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Success 
    remote isolated function getGetAttachmentCount(map<string|string[]> headers = {}, *GetGetAttachmentCountQueries queries) returns AttachmentsCount_1|error {
        string resourcePath = string `/GetAttachmentCount`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads the list of document types for a given SAP Object Type or SAP Object Node Type.
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Success 
    remote isolated function getGetSAPObjectDocumentType(map<string|string[]> headers = {}, *GetGetSAPObjectDocumentTypeQueries queries) returns Wrapper_1|error {
        string resourcePath = string `/GetSAPObjectDocumentType`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads the document info records.
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listA_DocumentInfoRecordAttches(map<string|string[]> headers = {}, *ListA_DocumentInfoRecordAttchesQueries queries) returns CollectionOfA_DocumentInfoRecordAttchWrapper|error {
        string resourcePath = string `/A_DocumentInfoRecordAttch`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads the attachments associated with a document info record.
    #
    # + DocumentInfoRecordDocType - Document Type
    # + DocumentInfoRecordDocNumber - Document number
    # + DocumentInfoRecordDocVersion - Document Version
    # + DocumentInfoRecordDocPart - Document Part
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listDocumentInfoRecordToAttachmentNavigationsOfA_DocumentInfoRecordAttch(string DocumentInfoRecordDocType, string DocumentInfoRecordDocNumber, string DocumentInfoRecordDocVersion, string DocumentInfoRecordDocPart, map<string|string[]> headers = {}, *ListDocumentInfoRecordToAttachmentNavigationsOfA_DocumentInfoRecordAttchQueries queries) returns CollectionOfAttachmentContentWrapper|error {
        string resourcePath = string `/A_DocumentInfoRecordAttch(DocumentInfoRecordDocType='${getEncodedUri(DocumentInfoRecordDocType)}',DocumentInfoRecordDocNumber='${getEncodedUri(DocumentInfoRecordDocNumber)}',DocumentInfoRecordDocVersion='${getEncodedUri(DocumentInfoRecordDocVersion)}',DocumentInfoRecordDocPart='${getEncodedUri(DocumentInfoRecordDocPart)}')/DocumentInfoRecordToAttachmentNavigation`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Send a group of requests
    #
    # + headers - Headers to be sent with the request 
    # + request - Batch request 
    # + return - Batch response 
    remote isolated function performBatchOperation(http:Request request, map<string|string[]> headers = {}) returns http:Response|error {
        string resourcePath = string `/$batch`;
        // TODO: Update the request as needed;
        return self.clientEp->post(resourcePath, request, headers);
    }
}
