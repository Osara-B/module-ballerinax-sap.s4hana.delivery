// AUTO-GENERATED FILE. DO NOT MODIFY.
// This file is auto-generated by the Ballerina OpenAPI tool.

import ballerina/http;
import ballerinax/sap;

# This service enables you to create, read, update and delete outbound deliveries. It can be consumed in Fiori apps and on other user interfaces.
public isolated client class Client {
    final sap:Client clientEp;

    # Gets invoked to initialize the `connector`.
    #
    # + config - The configurations to be used when initializing the `connector` 
    # + serviceUrl - URL of the target service 
    # + return - An error if connector initialization failed 
    public isolated function init(ConnectionConfig config, string hostname, int port = 443) returns error? {
        string serviceUrl = string `https://${hostname}:${port}/sap/opu/odata/sap/API_OUTBOUND_DELIVERY_SRV;v=0002`;
        http:ClientConfiguration httpClientConfig = {auth: config.auth, httpVersion: config.httpVersion, timeout: config.timeout, forwarded: config.forwarded, poolConfig: config.poolConfig, compression: config.compression, circuitBreaker: config.circuitBreaker, retryConfig: config.retryConfig, validation: config.validation};
        do {
            if config.http1Settings is ClientHttp1Settings {
                ClientHttp1Settings settings = check config.http1Settings.ensureType(ClientHttp1Settings);
                httpClientConfig.http1Settings = {...settings};
            }
            if config.http2Settings is http:ClientHttp2Settings {
                httpClientConfig.http2Settings = check config.http2Settings.ensureType(http:ClientHttp2Settings);
            }
            if config.cache is http:CacheConfig {
                httpClientConfig.cache = check config.cache.ensureType(http:CacheConfig);
            }
            if config.responseLimits is http:ResponseLimitConfigs {
                httpClientConfig.responseLimits = check config.responseLimits.ensureType(http:ResponseLimitConfigs);
            }
            if config.secureSocket is http:ClientSecureSocket {
                httpClientConfig.secureSocket = check config.secureSocket.ensureType(http:ClientSecureSocket);
            }
            if config.proxy is http:ProxyConfig {
                httpClientConfig.proxy = check config.proxy.ensureType(http:ProxyConfig);
            }
        }
        sap:Client httpEp = check new (serviceUrl, httpClientConfig);
        self.clientEp = httpEp;
        return;
    }

    # Creates handling unit headers.
    #
    # + headers - Headers to be sent with the request 
    # + payload - New entity 
    # + return - Created entity 
    remote isolated function createA_HandlingUnitHeaderDelivery(CreateA_HandlingUnitHeaderDelivery payload, map<string|string[]> headers = {}) returns A_HandlingUnitHeaderDeliveryWrapper|error {
        string resourcePath = string `/A_HandlingUnitHeaderDelivery`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Creates handling unit items.
    #
    # + headers - Headers to be sent with the request 
    # + payload - New entity 
    # + return - Created entity 
    remote isolated function createA_HandlingUnitItemDelivery(CreateA_HandlingUnitItemDelivery payload, map<string|string[]> headers = {}) returns A_HandlingUnitItemDeliveryWrapper|error {
        string resourcePath = string `/A_HandlingUnitItemDelivery`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Creates outbound deliveries with reference to preceding document.
    #
    # + headers - Headers to be sent with the request 
    # + payload - New entity 
    # + return - Created entity 
    remote isolated function createA_OutbDeliveryHeader(CreateA_OutbDeliveryHeader payload, map<string|string[]> headers = {}) returns A_OutbDeliveryHeaderWrapper|error {
        string resourcePath = string `/A_OutbDeliveryHeader`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Creates outbound delivery header texts.
    #
    # + headers - Headers to be sent with the request 
    # + payload - New entity 
    # + return - Created entity 
    remote isolated function createA_OutbDeliveryHeaderText(CreateA_OutbDeliveryHeaderText payload, map<string|string[]> headers = {}) returns A_OutbDeliveryHeaderTextWrapper|error {
        string resourcePath = string `/A_OutbDeliveryHeaderText`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Creates outbound delivery item texts.
    #
    # + headers - Headers to be sent with the request 
    # + payload - New entity 
    # + return - Created entity 
    remote isolated function createA_OutbDeliveryItemText(CreateA_OutbDeliveryItemText payload, map<string|string[]> headers = {}) returns A_OutbDeliveryItemTextWrapper|error {
        string resourcePath = string `/A_OutbDeliveryItemText`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Adds serial number to outbound delivery item.
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Success 
    remote isolated function createAddSerialNumberToDeliveryItem(map<string|string[]> headers = {}, *CreateAddSerialNumberToDeliveryItemQueries queries) returns Wrapper|error {
        string resourcePath = string `/AddSerialNumberToDeliveryItem`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        http:Request request = new;
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Invoke action AssignHandlingUnitToDelivery
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Success 
    remote isolated function createAssignHandlingUnitToDelivery(map<string|string[]> headers = {}, *CreateAssignHandlingUnitToDeliveryQueries queries) returns HuReturn_2|error {
        string resourcePath = string `/AssignHandlingUnitToDelivery`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        http:Request request = new;
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Confirms picked quantity of outbound delivery items.
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Success 
    remote isolated function createConfirmPickingAllItems(map<string|string[]> headers = {}, *CreateConfirmPickingAllItemsQueries queries) returns Wrapper|error {
        string resourcePath = string `/ConfirmPickingAllItems`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        http:Request request = new;
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Confirms picked quantity of outbound delivery item.
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Success 
    remote isolated function createConfirmPickingOneItem(map<string|string[]> headers = {}, *CreateConfirmPickingOneItemQueries queries) returns Wrapper|error {
        string resourcePath = string `/ConfirmPickingOneItem`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        http:Request request = new;
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Performs a batch split for the outbound delivery item.
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Success 
    remote isolated function createCreateBatchSplitItem(map<string|string[]> headers = {}, *CreateCreateBatchSplitItemQueries queries) returns CreatedDeliveryItem_1|error {
        string resourcePath = string `/CreateBatchSplitItem`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        http:Request request = new;
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Deletes all handling units from outbound delivery.
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Success 
    remote isolated function createDeleteAllHandlingUnitsFromDelivery(map<string|string[]> headers = {}, *CreateDeleteAllHandlingUnitsFromDeliveryQueries queries) returns HuReturn_1|error {
        string resourcePath = string `/DeleteAllHandlingUnitsFromDelivery`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        http:Request request = new;
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Deletes all serial numbers from outbound delivery item.
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Success 
    remote isolated function createDeleteAllSerialNumbersFromDeliveryItem(map<string|string[]> headers = {}, *CreateDeleteAllSerialNumbersFromDeliveryItemQueries queries) returns Wrapper|error {
        string resourcePath = string `/DeleteAllSerialNumbersFromDeliveryItem`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        http:Request request = new;
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Deletes serial number from outbound delivery item.
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Success 
    remote isolated function createDeleteSerialNumberFromDeliveryItem(map<string|string[]> headers = {}, *CreateDeleteSerialNumberFromDeliveryItemQueries queries) returns Wrapper|error {
        string resourcePath = string `/DeleteSerialNumberFromDeliveryItem`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        http:Request request = new;
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Creates outbound delivery item texts.
    #
    # + DeliveryDocument - Delivery
    # + DeliveryDocumentItem - Item
    # + headers - Headers to be sent with the request 
    # + payload - New entity 
    # + return - Created entity 
    remote isolated function createDeliveryDocumentItemTextOfA_OutbDeliveryItem(string DeliveryDocument, string DeliveryDocumentItem, CreateA_OutbDeliveryItemText payload, map<string|string[]> headers = {}) returns A_OutbDeliveryItemTextWrapper|error {
        string resourcePath = string `/A_OutbDeliveryItem(DeliveryDocument='${getEncodedUri(DeliveryDocument)}',DeliveryDocumentItem='${getEncodedUri(DeliveryDocumentItem)}')/to_DeliveryDocumentItemText`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Creates outbound delivery header texts.
    #
    # + DeliveryDocument - Delivery
    # + headers - Headers to be sent with the request 
    # + payload - New entity 
    # + return - Created entity 
    remote isolated function createDeliveryDocumentTextOfA_OutbDeliveryHeader(string DeliveryDocument, CreateA_OutbDeliveryHeaderText payload, map<string|string[]> headers = {}) returns A_OutbDeliveryHeaderTextWrapper|error {
        string resourcePath = string `/A_OutbDeliveryHeader('${getEncodedUri(DeliveryDocument)}')/to_DeliveryDocumentText`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Takes over delivery quantity as picked quantity for all outbound delivery items.
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Success 
    remote isolated function createPickAllItems(map<string|string[]> headers = {}, *CreatePickAllItemsQueries queries) returns Wrapper|error {
        string resourcePath = string `/PickAllItems`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        http:Request request = new;
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Performs batch split and sets picked quantity.
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Success 
    remote isolated function createPickAndBatchSplitOneItem(map<string|string[]> headers = {}, *CreatePickAndBatchSplitOneItemQueries queries) returns Wrapper|error {
        string resourcePath = string `/PickAndBatchSplitOneItem`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        http:Request request = new;
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Takes over delivery quantity as picked quantity for specified outbound delivery item.
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Success 
    remote isolated function createPickOneItem(map<string|string[]> headers = {}, *CreatePickOneItemQueries queries) returns Wrapper|error {
        string resourcePath = string `/PickOneItem`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        http:Request request = new;
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Sets picked quantity and delivery quantity for outbound delivery item.
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Success 
    remote isolated function createPickOneItemWithBaseQuantity(map<string|string[]> headers = {}, *CreatePickOneItemWithBaseQuantityQueries queries) returns Wrapper|error {
        string resourcePath = string `/PickOneItemWithBaseQuantity`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        http:Request request = new;
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Sets picked quantity and delivery quantity for outbound delivery item.
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Success 
    remote isolated function createPickOneItemWithSalesQuantity(map<string|string[]> headers = {}, *CreatePickOneItemWithSalesQuantityQueries queries) returns Wrapper|error {
        string resourcePath = string `/PickOneItemWithSalesQuantity`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        http:Request request = new;
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Posts goods issue for outbound delivery.
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Success 
    remote isolated function createPostGoodsIssue(map<string|string[]> headers = {}, *CreatePostGoodsIssueQueries queries) returns Wrapper|error {
        string resourcePath = string `/PostGoodsIssue`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        http:Request request = new;
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Reverses goods issue for outbound delivery.
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Success 
    remote isolated function createReverseGoodsIssue(map<string|string[]> headers = {}, *CreateReverseGoodsIssueQueries queries) returns Wrapper_1|error {
        string resourcePath = string `/ReverseGoodsIssue`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        http:Request request = new;
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Sets picked quantity in base unit of measure for  delivery item.
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Success 
    remote isolated function createSetPickingQuantityWithBaseQuantity(map<string|string[]> headers = {}, *CreateSetPickingQuantityWithBaseQuantityQueries queries) returns Wrapper|error {
        string resourcePath = string `/SetPickingQuantityWithBaseQuantity`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        http:Request request = new;
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Deletes outbound deliveries.
    #
    # + DeliveryDocument - Delivery
    # + headers - Headers to be sent with the request 
    # + return - Success 
    remote isolated function deleteA_OutbDeliveryHeader(string DeliveryDocument, map<string|string[]> headers = {}) returns http:Response|error {
        string resourcePath = string `/A_OutbDeliveryHeader('${getEncodedUri(DeliveryDocument)}')`;
        return self.clientEp->delete(resourcePath, headers = headers);
    }

    # Deletes outbound delivery header texts.
    #
    # + DeliveryDocument - Delivery
    # + TextElement - Text ID
    # + Language - Language
    # + headers - Headers to be sent with the request 
    # + return - Success 
    remote isolated function deleteA_OutbDeliveryHeaderText(string DeliveryDocument, string TextElement, string Language, map<string|string[]> headers = {}) returns http:Response|error {
        string resourcePath = string `/A_OutbDeliveryHeaderText(DeliveryDocument='${getEncodedUri(DeliveryDocument)}',TextElement='${getEncodedUri(TextElement)}',Language='${getEncodedUri(Language)}')`;
        return self.clientEp->delete(resourcePath, headers = headers);
    }

    # Deletes outbound delivery items.
    #
    # + DeliveryDocument - Delivery
    # + DeliveryDocumentItem - Item
    # + headers - Headers to be sent with the request 
    # + return - Success 
    remote isolated function deleteA_OutbDeliveryItem(string DeliveryDocument, string DeliveryDocumentItem, map<string|string[]> headers = {}) returns http:Response|error {
        string resourcePath = string `/A_OutbDeliveryItem(DeliveryDocument='${getEncodedUri(DeliveryDocument)}',DeliveryDocumentItem='${getEncodedUri(DeliveryDocumentItem)}')`;
        return self.clientEp->delete(resourcePath, headers = headers);
    }

    # Deletes outbound delivery item texts.
    #
    # + DeliveryDocument - Delivery
    # + DeliveryDocumentItem - Item
    # + TextElement - Text ID
    # + Language - Language
    # + headers - Headers to be sent with the request 
    # + return - Success 
    remote isolated function deleteA_OutbDeliveryItemText(string DeliveryDocument, string DeliveryDocumentItem, string TextElement, string Language, map<string|string[]> headers = {}) returns http:Response|error {
        string resourcePath = string `/A_OutbDeliveryItemText(DeliveryDocument='${getEncodedUri(DeliveryDocument)}',DeliveryDocumentItem='${getEncodedUri(DeliveryDocumentItem)}',TextElement='${getEncodedUri(TextElement)}',Language='${getEncodedUri(Language)}')`;
        return self.clientEp->delete(resourcePath, headers = headers);
    }

    # Reads outbound delivery partner addresses.
    #
    # + DeliveryDocument - SD Document
    # + PartnerFunction - Partner Functn
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getA_OutbDeliveryAddress2(string DeliveryDocument, string PartnerFunction, map<string|string[]> headers = {}, *GetA_OutbDeliveryAddress2Queries queries) returns A_OutbDeliveryAddress2Wrapper|error {
        string resourcePath = string `/A_OutbDeliveryAddress2(DeliveryDocument='${getEncodedUri(DeliveryDocument)}',PartnerFunction='${getEncodedUri(PartnerFunction)}')`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads outbound delivery document flows by key.
    #
    # + PrecedingDocument - Preceding Doc.
    # + PrecedingDocumentItem - Preceding Item
    # + SubsequentDocumentCategory - Subs.Doc.Categ.
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getA_OutbDeliveryDocFlow(string PrecedingDocument, string PrecedingDocumentItem, string SubsequentDocumentCategory, map<string|string[]> headers = {}, *GetA_OutbDeliveryDocFlowQueries queries) returns A_OutbDeliveryDocFlowWrapper|error {
        string resourcePath = string `/A_OutbDeliveryDocFlow(PrecedingDocument='${getEncodedUri(PrecedingDocument)}',PrecedingDocumentItem='${getEncodedUri(PrecedingDocumentItem)}',SubsequentDocumentCategory='${getEncodedUri(SubsequentDocumentCategory)}')`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads outbound delivery headers.
    #
    # + DeliveryDocument - Delivery
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getA_OutbDeliveryHeader(string DeliveryDocument, map<string|string[]> headers = {}, *GetA_OutbDeliveryHeaderQueries queries) returns A_OutbDeliveryHeaderWrapper|error {
        string resourcePath = string `/A_OutbDeliveryHeader('${getEncodedUri(DeliveryDocument)}')`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads outbound delivery items.
    #
    # + DeliveryDocument - Delivery
    # + DeliveryDocumentItem - Item
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getA_OutbDeliveryItem(string DeliveryDocument, string DeliveryDocumentItem, map<string|string[]> headers = {}, *GetA_OutbDeliveryItemQueries queries) returns A_OutbDeliveryItemWrapper|error {
        string resourcePath = string `/A_OutbDeliveryItem(DeliveryDocument='${getEncodedUri(DeliveryDocument)}',DeliveryDocumentItem='${getEncodedUri(DeliveryDocumentItem)}')`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads addresses of specific outbound delivery partner.
    #
    # + PartnerFunction - Partner Functn
    # + SDDocument - SD Document
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getAddress2OfA_OutbDeliveryPartner(string PartnerFunction, string SDDocument, map<string|string[]> headers = {}, *GetAddress2OfA_OutbDeliveryPartnerQueries queries) returns A_OutbDeliveryAddress2Wrapper|error {
        string resourcePath = string `/A_OutbDeliveryPartner(PartnerFunction='${getEncodedUri(PartnerFunction)}',SDDocument='${getEncodedUri(SDDocument)}')/to_Address2`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads addresses of specific outbound delivery partner.
    #
    # + PartnerFunction - Partner Functn
    # + SDDocument - SD Document
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getAddressOfA_OutbDeliveryPartner(string PartnerFunction, string SDDocument, map<string|string[]> headers = {}, *GetAddressOfA_OutbDeliveryPartnerQueries queries) returns A_OutbDeliveryAddressWrapper|error {
        string resourcePath = string `/A_OutbDeliveryPartner(PartnerFunction='${getEncodedUri(PartnerFunction)}',SDDocument='${getEncodedUri(SDDocument)}')/to_Address`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads maintenance item object list headers of specific outbound delivery item.
    #
    # + DeliveryDocument - Delivery
    # + DeliveryDocumentItem - Item
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getSerialDeliveryItemOfA_OutbDeliveryItem(string DeliveryDocument, string DeliveryDocumentItem, map<string|string[]> headers = {}, *GetSerialDeliveryItemOfA_OutbDeliveryItemQueries queries) returns A_SerialNmbrDeliveryWrapper|error {
        string resourcePath = string `/A_OutbDeliveryItem(DeliveryDocument='${getEncodedUri(DeliveryDocument)}',DeliveryDocumentItem='${getEncodedUri(DeliveryDocumentItem)}')/to_SerialDeliveryItem`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads outbound delivery partner addresses.
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listA_OutbDeliveryAddress2s(map<string|string[]> headers = {}, *ListA_OutbDeliveryAddress2sQueries queries) returns CollectionOfA_OutbDeliveryAddress2Wrapper|error {
        string resourcePath = string `/A_OutbDeliveryAddress2`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads outbound delivery headers.
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listA_OutbDeliveryHeaders(map<string|string[]> headers = {}, *ListA_OutbDeliveryHeadersQueries queries) returns CollectionOfA_OutbDeliveryHeaderWrapper|error {
        string resourcePath = string `/A_OutbDeliveryHeader`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads outbound delivery items.
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listA_OutbDeliveryItems(map<string|string[]> headers = {}, *ListA_OutbDeliveryItemsQueries queries) returns CollectionOfA_OutbDeliveryItemWrapper|error {
        string resourcePath = string `/A_OutbDeliveryItem`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads texts of specific outbound delivery item.
    #
    # + DeliveryDocument - Delivery
    # + DeliveryDocumentItem - Item
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listDeliveryDocumentItemTextsOfA_OutbDeliveryItem(string DeliveryDocument, string DeliveryDocumentItem, map<string|string[]> headers = {}, *ListDeliveryDocumentItemTextsOfA_OutbDeliveryItemQueries queries) returns CollectionOfA_OutbDeliveryItemTextWrapper|error {
        string resourcePath = string `/A_OutbDeliveryItem(DeliveryDocument='${getEncodedUri(DeliveryDocument)}',DeliveryDocumentItem='${getEncodedUri(DeliveryDocumentItem)}')/to_DeliveryDocumentItemText`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads items of specific outbound delivery header.
    #
    # + DeliveryDocument - Delivery
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listDeliveryDocumentItemsOfA_OutbDeliveryHeader(string DeliveryDocument, map<string|string[]> headers = {}, *ListDeliveryDocumentItemsOfA_OutbDeliveryHeaderQueries queries) returns CollectionOfA_OutbDeliveryItemWrapper|error {
        string resourcePath = string `/A_OutbDeliveryHeader('${getEncodedUri(DeliveryDocument)}')/to_DeliveryDocumentItem`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads partners of specific outbound delivery header.
    #
    # + DeliveryDocument - Delivery
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listDeliveryDocumentPartnersOfA_OutbDeliveryHeader(string DeliveryDocument, map<string|string[]> headers = {}, *ListDeliveryDocumentPartnersOfA_OutbDeliveryHeaderQueries queries) returns CollectionOfA_OutbDeliveryPartnerWrapper|error {
        string resourcePath = string `/A_OutbDeliveryHeader('${getEncodedUri(DeliveryDocument)}')/to_DeliveryDocumentPartner`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads texts of specific outbound delivery header.
    #
    # + DeliveryDocument - Delivery
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listDeliveryDocumentTextsOfA_OutbDeliveryHeader(string DeliveryDocument, map<string|string[]> headers = {}, *ListDeliveryDocumentTextsOfA_OutbDeliveryHeaderQueries queries) returns CollectionOfA_OutbDeliveryHeaderTextWrapper|error {
        string resourcePath = string `/A_OutbDeliveryHeader('${getEncodedUri(DeliveryDocument)}')/to_DeliveryDocumentText`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads document flows of specific outbound delivery item.
    #
    # + DeliveryDocument - Delivery
    # + DeliveryDocumentItem - Item
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listDocumentFlowsOfA_OutbDeliveryItem(string DeliveryDocument, string DeliveryDocumentItem, map<string|string[]> headers = {}, *ListDocumentFlowsOfA_OutbDeliveryItemQueries queries) returns CollectionOfA_OutbDeliveryDocFlowWrapper|error {
        string resourcePath = string `/A_OutbDeliveryItem(DeliveryDocument='${getEncodedUri(DeliveryDocument)}',DeliveryDocumentItem='${getEncodedUri(DeliveryDocumentItem)}')/to_DocumentFlow`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads handling units headers of specific outbound delivery header.
    #
    # + DeliveryDocument - Delivery
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listHandlingUnitHeaderDeliveriesOfA_OutbDeliveryHeader(string DeliveryDocument, map<string|string[]> headers = {}, *ListHandlingUnitHeaderDeliveriesOfA_OutbDeliveryHeaderQueries queries) returns CollectionOfA_HandlingUnitHeaderDeliveryWrapper|error {
        string resourcePath = string `/A_OutbDeliveryHeader('${getEncodedUri(DeliveryDocument)}')/to_HandlingUnitHeaderDelivery`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads maintenance item object lists of specific outbound delivery maintenance item object list header.
    #
    # + MaintenanceItemObjectList - Object list
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listMaintenanceItemObjectsOfA_SerialNmbrDelivery(string MaintenanceItemObjectList, map<string|string[]> headers = {}, *ListMaintenanceItemObjectsOfA_SerialNmbrDeliveryQueries queries) returns CollectionOfA_MaintenanceItemObjectWrapper|error {
        string resourcePath = string `/A_SerialNmbrDelivery(${getEncodedUri(MaintenanceItemObjectList)})/to_MaintenanceItemObject`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Updates outbound delivery partner addresses.
    #
    # + DeliveryDocument - SD Document
    # + PartnerFunction - Partner Functn
    # + headers - Headers to be sent with the request 
    # + payload - New property values 
    # + return - Success 
    remote isolated function patchA_OutbDeliveryAddress2(string DeliveryDocument, string PartnerFunction, Modified\ A_OutbDeliveryAddress2Type payload, map<string|string[]> headers = {}) returns http:Response|error {
        string resourcePath = string `/A_OutbDeliveryAddress2(DeliveryDocument='${getEncodedUri(DeliveryDocument)}',PartnerFunction='${getEncodedUri(PartnerFunction)}')`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->patch(resourcePath, request, headers);
    }

    # Updates outbound delivery document flows.
    #
    # + PrecedingDocument - Preceding Doc.
    # + PrecedingDocumentItem - Preceding Item
    # + SubsequentDocumentCategory - Subs.Doc.Categ.
    # + headers - Headers to be sent with the request 
    # + payload - New property values 
    # + return - Success 
    remote isolated function patchA_OutbDeliveryDocFlow(string PrecedingDocument, string PrecedingDocumentItem, string SubsequentDocumentCategory, Modified\ A_OutbDeliveryDocFlowType payload, map<string|string[]> headers = {}) returns http:Response|error {
        string resourcePath = string `/A_OutbDeliveryDocFlow(PrecedingDocument='${getEncodedUri(PrecedingDocument)}',PrecedingDocumentItem='${getEncodedUri(PrecedingDocumentItem)}',SubsequentDocumentCategory='${getEncodedUri(SubsequentDocumentCategory)}')`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->patch(resourcePath, request, headers);
    }

    # Updates outbound delivery headers.
    #
    # + DeliveryDocument - Delivery
    # + headers - Headers to be sent with the request 
    # + payload - New property values 
    # + return - Success 
    remote isolated function patchA_OutbDeliveryHeader(string DeliveryDocument, Modified\ A_OutbDeliveryHeaderType payload, map<string|string[]> headers = {}) returns http:Response|error {
        string resourcePath = string `/A_OutbDeliveryHeader('${getEncodedUri(DeliveryDocument)}')`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->patch(resourcePath, request, headers);
    }

    # Updates outbound delivery header texts.
    #
    # + DeliveryDocument - Delivery
    # + TextElement - Text ID
    # + Language - Language
    # + headers - Headers to be sent with the request 
    # + payload - New property values 
    # + return - Success 
    remote isolated function patchA_OutbDeliveryHeaderText(string DeliveryDocument, string TextElement, string Language, Modified\ A_OutbDeliveryHeaderTextType payload, map<string|string[]> headers = {}) returns http:Response|error {
        string resourcePath = string `/A_OutbDeliveryHeaderText(DeliveryDocument='${getEncodedUri(DeliveryDocument)}',TextElement='${getEncodedUri(TextElement)}',Language='${getEncodedUri(Language)}')`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->patch(resourcePath, request, headers);
    }

    # Updates outbound delivery items.
    #
    # + DeliveryDocument - Delivery
    # + DeliveryDocumentItem - Item
    # + headers - Headers to be sent with the request 
    # + payload - New property values 
    # + return - Success 
    remote isolated function patchA_OutbDeliveryItem(string DeliveryDocument, string DeliveryDocumentItem, Modified\ A_OutbDeliveryItemType payload, map<string|string[]> headers = {}) returns http:Response|error {
        string resourcePath = string `/A_OutbDeliveryItem(DeliveryDocument='${getEncodedUri(DeliveryDocument)}',DeliveryDocumentItem='${getEncodedUri(DeliveryDocumentItem)}')`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->patch(resourcePath, request, headers);
    }

    # Updates outbound delivery item texts.
    #
    # + DeliveryDocument - Delivery
    # + DeliveryDocumentItem - Item
    # + TextElement - Text ID
    # + Language - Language
    # + headers - Headers to be sent with the request 
    # + payload - New property values 
    # + return - Success 
    remote isolated function patchA_OutbDeliveryItemText(string DeliveryDocument, string DeliveryDocumentItem, string TextElement, string Language, Modified\ A_OutbDeliveryItemTextType payload, map<string|string[]> headers = {}) returns http:Response|error {
        string resourcePath = string `/A_OutbDeliveryItemText(DeliveryDocument='${getEncodedUri(DeliveryDocument)}',DeliveryDocumentItem='${getEncodedUri(DeliveryDocumentItem)}',TextElement='${getEncodedUri(TextElement)}',Language='${getEncodedUri(Language)}')`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->patch(resourcePath, request, headers);
    }

    # Send a group of requests
    #
    # + headers - Headers to be sent with the request 
    # + request - Batch request 
    # + return - Batch response 
    remote isolated function performBatchOperation(http:Request request, map<string|string[]> headers = {}) returns http:Response|error {
        string resourcePath = string `/$batch`;
        // TODO: Update the request as needed;
        return self.clientEp->post(resourcePath, request, headers);
    }
}
